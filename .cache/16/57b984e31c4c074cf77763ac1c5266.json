{"id":"node_modules/turf-point-on-line/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-point-on-line\\package.json","includedInParent":true,"mtime":1557726825583},{"name":"turf-distance","loc":{"line":1,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-point-on-line\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"},{"name":"turf-helpers","loc":{"line":2,"column":20},"parent":"C:\\桌面\\new-project\\node_modules\\turf-point-on-line\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"},{"name":"turf-bearing","loc":{"line":3,"column":22},"parent":"C:\\桌面\\new-project\\node_modules\\turf-point-on-line\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-bearing\\index.js"},{"name":"turf-destination","loc":{"line":4,"column":26},"parent":"C:\\桌面\\new-project\\node_modules\\turf-point-on-line\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-destination\\index.js"}],"generated":{"js":"var distance = require('turf-distance');\nvar point = require('turf-helpers').point;\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the LineString.\n *\n * @name pointOnLine\n * @param {Feature<LineString>} line line to snap to\n * @param {Feature<Point>} point point to snap from\n * @return {Feature<Point>} closest point on the `line` to `point`\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-77.037076, 38.884017]\n *   }\n * };\n *\n * var snapped = turf.pointOnLine(line, pt);\n * snapped.properties['marker-color'] = '#00f'\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, pt, snapped]\n * };\n *\n * //=result\n */\n\nmodule.exports = function (line, pt) {\n    var coords;\n    if (line.type === 'Feature') {\n        coords = line.geometry.coordinates;\n    } else if (line.type === 'LineString') {\n        coords = line.coordinates;\n    } else {\n        throw new Error('input must be a LineString Feature or Geometry');\n    }\n\n    return pointOnLine(pt, coords);\n};\n\nfunction pointOnLine(pt, coords) {\n    var units = 'miles';\n    var closestPt = point([Infinity, Infinity], {\n        dist: Infinity\n    });\n    for (var i = 0; i < coords.length - 1; i++) {\n        var start = point(coords[i]);\n        var stop = point(coords[i + 1]);\n        //start\n        start.properties.dist = distance(pt, start, units);\n        //stop\n        stop.properties.dist = distance(pt, stop, units);\n        //perpendicular\n        var heightDistance = Math.max(start.properties.dist, stop.properties.dist);\n        var direction = bearing(start, stop);\n        var perpendicularPt1 = destination(pt, heightDistance, direction + 90, units);\n        var perpendicularPt2 = destination(pt, heightDistance, direction - 90, units);\n        var intersect = lineIntersects(\n        perpendicularPt1.geometry.coordinates[0],\n        perpendicularPt1.geometry.coordinates[1],\n        perpendicularPt2.geometry.coordinates[0],\n        perpendicularPt2.geometry.coordinates[1],\n        start.geometry.coordinates[0],\n        start.geometry.coordinates[1],\n        stop.geometry.coordinates[0],\n        stop.geometry.coordinates[1]\n        );\n        var intersectPt;\n        if (intersect) {\n            intersectPt = point(intersect);\n            intersectPt.properties.dist = distance(pt, intersectPt, units);\n        }\n\n        if (start.properties.dist < closestPt.properties.dist) {\n            closestPt = start;\n            closestPt.properties.index = i;\n        }\n        if (stop.properties.dist < closestPt.properties.dist) {\n            closestPt = stop;\n            closestPt.properties.index = i;\n        }\n        if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {\n            closestPt = intersectPt;\n            closestPt.properties.index = i;\n        }\n    }\n\n    return closestPt;\n}\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n    var denominator, a, b, numerator1, numerator2;\n    var result = {\n        x: null,\n        y: null,\n        onLine1: false,\n        onLine2: false\n    };\n    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n    if (denominator === 0) {\n        if (result.x !== null && result.y !== null) {\n            return result;\n        } else {\n            return false;\n        }\n    }\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n\n    // if we cast these lines infinitely in both directions, they intersect here:\n    result.x = line1StartX + (a * (line1EndX - line1StartX));\n    result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n    // if line1 is a segment and line2 is infinite, they intersect if:\n    if (a > 0 && a < 1) {\n        result.onLine1 = true;\n    }\n    // if line2 is a segment and line1 is infinite, they intersect if:\n    if (b > 0 && b < 1) {\n        result.onLine2 = true;\n    }\n    // if line1 and line2 are segments, they intersect if both of the above are true\n    if (result.onLine1 && result.onLine2) {\n        return [result.x, result.y];\n    } else {\n        return false;\n    }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-point-on-line/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/turf-point-on-line/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}}],"sources":{"node_modules/turf-point-on-line/index.js":"var distance = require('turf-distance');\nvar point = require('turf-helpers').point;\nvar bearing = require('turf-bearing');\nvar destination = require('turf-destination');\n\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the LineString.\n *\n * @name pointOnLine\n * @param {Feature<LineString>} line line to snap to\n * @param {Feature<Point>} point point to snap from\n * @return {Feature<Point>} closest point on the `line` to `point`\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-77.037076, 38.884017]\n *   }\n * };\n *\n * var snapped = turf.pointOnLine(line, pt);\n * snapped.properties['marker-color'] = '#00f'\n *\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [line, pt, snapped]\n * };\n *\n * //=result\n */\n\nmodule.exports = function (line, pt) {\n    var coords;\n    if (line.type === 'Feature') {\n        coords = line.geometry.coordinates;\n    } else if (line.type === 'LineString') {\n        coords = line.coordinates;\n    } else {\n        throw new Error('input must be a LineString Feature or Geometry');\n    }\n\n    return pointOnLine(pt, coords);\n};\n\nfunction pointOnLine(pt, coords) {\n    var units = 'miles';\n    var closestPt = point([Infinity, Infinity], {\n        dist: Infinity\n    });\n    for (var i = 0; i < coords.length - 1; i++) {\n        var start = point(coords[i]);\n        var stop = point(coords[i + 1]);\n        //start\n        start.properties.dist = distance(pt, start, units);\n        //stop\n        stop.properties.dist = distance(pt, stop, units);\n        //perpendicular\n        var heightDistance = Math.max(start.properties.dist, stop.properties.dist);\n        var direction = bearing(start, stop);\n        var perpendicularPt1 = destination(pt, heightDistance, direction + 90, units);\n        var perpendicularPt2 = destination(pt, heightDistance, direction - 90, units);\n        var intersect = lineIntersects(\n        perpendicularPt1.geometry.coordinates[0],\n        perpendicularPt1.geometry.coordinates[1],\n        perpendicularPt2.geometry.coordinates[0],\n        perpendicularPt2.geometry.coordinates[1],\n        start.geometry.coordinates[0],\n        start.geometry.coordinates[1],\n        stop.geometry.coordinates[0],\n        stop.geometry.coordinates[1]\n        );\n        var intersectPt;\n        if (intersect) {\n            intersectPt = point(intersect);\n            intersectPt.properties.dist = distance(pt, intersectPt, units);\n        }\n\n        if (start.properties.dist < closestPt.properties.dist) {\n            closestPt = start;\n            closestPt.properties.index = i;\n        }\n        if (stop.properties.dist < closestPt.properties.dist) {\n            closestPt = stop;\n            closestPt.properties.index = i;\n        }\n        if (intersectPt && intersectPt.properties.dist < closestPt.properties.dist) {\n            closestPt = intersectPt;\n            closestPt.properties.index = i;\n        }\n    }\n\n    return closestPt;\n}\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n    var denominator, a, b, numerator1, numerator2;\n    var result = {\n        x: null,\n        y: null,\n        onLine1: false,\n        onLine2: false\n    };\n    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n    if (denominator === 0) {\n        if (result.x !== null && result.y !== null) {\n            return result;\n        } else {\n            return false;\n        }\n    }\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n\n    // if we cast these lines infinitely in both directions, they intersect here:\n    result.x = line1StartX + (a * (line1EndX - line1StartX));\n    result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n    // if line1 is a segment and line2 is infinite, they intersect if:\n    if (a > 0 && a < 1) {\n        result.onLine1 = true;\n    }\n    // if line2 is a segment and line1 is infinite, they intersect if:\n    if (b > 0 && b < 1) {\n        result.onLine2 = true;\n    }\n    // if line1 and line2 are segments, they intersect if both of the above are true\n    if (result.onLine1 && result.onLine2) {\n        return [result.x, result.y];\n    } else {\n        return false;\n    }\n}\n"},"lineCount":156}},"error":null,"hash":"ebd29ec4e60f73fb6c8a5456e9e262cb","cacheData":{"env":{}}}