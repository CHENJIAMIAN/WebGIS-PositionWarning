{"id":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557670107923},{"name":"C:\\桌面\\new-project\\node_modules\\jsdom\\package.json","includedInParent":true,"mtime":1557646988018}],"generated":{"js":"\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\n\nexports.implementation = EventModifierMixinImpl;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}}],"sources":{"node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js":"\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\n\nexports.implementation = EventModifierMixinImpl;\n"},"lineCount":19}},"error":null,"hash":"017d81a7f6c9f8ac5b6ed916b14bac0f","cacheData":{"env":{}}}