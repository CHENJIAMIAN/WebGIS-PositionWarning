{"id":"node_modules/turf-collect/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-collect\\package.json","includedInParent":true,"mtime":1557726825792},{"name":"turf-inside","loc":{"line":1,"column":21},"parent":"C:\\桌面\\new-project\\node_modules\\turf-collect\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-inside\\index.js"}],"generated":{"js":"var inside = require('turf-inside');\n\n/**\n * Joins attributes FeatureCollection of polygons with a FeatureCollection of\n * points. Given an `inProperty` on points and an `outProperty` for polygons,\n * this finds every point that lies within each polygon, collects the `inProperty`\n * values from those points, and adds them as an array to `outProperty` on the\n * polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @return {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = featurecollection([poly1, poly2]);\n * var pt1 = point([5,5], {population: 200});\n * var pt2 = point([1,3], {population: 600});\n * var pt3 = point([14,2], {population: 100});\n * var pt4 = point([13,1], {population: 200});\n * var pt5 = point([19,7], {population: 300});\n * var ptFC = featurecollection([pt1, pt2, pt3, pt4, pt5]);\n * var aggregated = aggregate(polyFC, ptFC, 'population', 'values');\n *\n * aggregated.features[0].properties.values // => [200, 600]);\n */\nmodule.exports = function collect(polygons, points, inProperty, outProperty) {\n    polygons.features.forEach(function (poly) {\n        var values = points.features.filter(function (pt) {\n            return inside(pt, poly);\n        }).map(function (pt) {\n            return pt.properties[inProperty];\n        });\n\n        if (!poly.properties) {\n            poly.properties = {};\n        }\n\n        poly.properties[outProperty] = values;\n    });\n\n    return polygons;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-collect/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-collect/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}}],"sources":{"node_modules/turf-collect/index.js":"var inside = require('turf-inside');\n\n/**\n * Joins attributes FeatureCollection of polygons with a FeatureCollection of\n * points. Given an `inProperty` on points and an `outProperty` for polygons,\n * this finds every point that lies within each polygon, collects the `inProperty`\n * values from those points, and adds them as an array to `outProperty` on the\n * polygon.\n *\n * @name collect\n * @param {FeatureCollection<Polygon>} polygons polygons with values on which to aggregate\n * @param {FeatureCollection<Point>} points points to be aggregated\n * @param {string} inProperty property to be nested from\n * @param {string} outProperty property to be nested into\n * @return {FeatureCollection<Polygon>} polygons with properties listed based on `outField`\n * @example\n * var poly1 = polygon([[[0,0],[10,0],[10,10],[0,10],[0,0]]]);\n * var poly2 = polygon([[[10,0],[20,10],[20,20],[20,0],[10,0]]]);\n * var polyFC = featurecollection([poly1, poly2]);\n * var pt1 = point([5,5], {population: 200});\n * var pt2 = point([1,3], {population: 600});\n * var pt3 = point([14,2], {population: 100});\n * var pt4 = point([13,1], {population: 200});\n * var pt5 = point([19,7], {population: 300});\n * var ptFC = featurecollection([pt1, pt2, pt3, pt4, pt5]);\n * var aggregated = aggregate(polyFC, ptFC, 'population', 'values');\n *\n * aggregated.features[0].properties.values // => [200, 600]);\n */\nmodule.exports = function collect(polygons, points, inProperty, outProperty) {\n    polygons.features.forEach(function (poly) {\n        var values = points.features.filter(function (pt) {\n            return inside(pt, poly);\n        }).map(function (pt) {\n            return pt.properties[inProperty];\n        });\n\n        if (!poly.properties) {\n            poly.properties = {};\n        }\n\n        poly.properties[outProperty] = values;\n    });\n\n    return polygons;\n};\n"},"lineCount":47}},"error":null,"hash":"dadede8b438a97b6c6e39bdae35087cb","cacheData":{"env":{}}}