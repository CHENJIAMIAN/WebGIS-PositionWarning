{"id":"node_modules/turf-buffer/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-buffer\\package.json","includedInParent":true,"mtime":1557726825791},{"name":"turf-helpers","loc":{"line":5,"column":22},"parent":"C:\\桌面\\new-project\\node_modules\\turf-buffer\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"},{"name":"jsts","loc":{"line":7,"column":19},"parent":"C:\\桌面\\new-project\\node_modules\\turf-buffer\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\jsts\\dist\\jsts.min.js"},{"name":"geojson-normalize","loc":{"line":8,"column":24},"parent":"C:\\桌面\\new-project\\node_modules\\turf-buffer\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\geojson-normalize\\index.js"}],"generated":{"js":"// http://stackoverflow.com/questions/839899/how-do-i-calculate-a-point-on-a-circles-circumference\n// radians = degrees * (pi/180)\n// https://github.com/bjornharrtell/jsts/blob/master/examples/buffer.html\n\nvar helpers = require('turf-helpers');\nvar featureCollection = helpers.featureCollection;\nvar jsts = require('jsts');\nvar normalize = require('geojson-normalize');\n\n/**\n * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.\n *\n * @name buffer\n * @param {(Feature|FeatureCollection)} feature input to be buffered\n * @param {number} distance distance to draw the buffer\n * @param {string} unit any of the options supported by turf units\n * @return {FeatureCollection<Polygon>|FeatureCollection<MultiPolygon>|Polygon|MultiPolygon} buffered features\n *\n * @example\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-90.548630, 14.616599]\n *   }\n * };\n * var unit = 'miles';\n *\n * var buffered = turf.buffer(pt, 500, unit);\n * var result = turf.featurecollection([buffered, pt]);\n *\n * //=result\n */\n\nmodule.exports = function (feature, radius, units) {\n\n    var degrees = helpers.distanceToDegrees(radius, units);\n    var fc = normalize(feature);\n    var buffered = normalize(featureCollection(fc.features.map(function (f) {\n        return bufferOp(f, degrees);\n    })));\n\n    if (buffered.features.length > 1) return buffered;\n    else if (buffered.features.length === 1) return buffered.features[0];\n};\n\nfunction bufferOp(feature, radius) {\n    var reader = new jsts.io.GeoJSONReader();\n    var geom = reader.read(feature.geometry);\n    var buffered = geom.buffer(radius);\n    var writer = new jsts.io.GeoJSONWriter();\n    buffered = writer.write(buffered);\n\n    return {\n        type: 'Feature',\n        geometry: buffered,\n        properties: {}\n    };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-buffer/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-buffer/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}}],"sources":{"node_modules/turf-buffer/index.js":"// http://stackoverflow.com/questions/839899/how-do-i-calculate-a-point-on-a-circles-circumference\n// radians = degrees * (pi/180)\n// https://github.com/bjornharrtell/jsts/blob/master/examples/buffer.html\n\nvar helpers = require('turf-helpers');\nvar featureCollection = helpers.featureCollection;\nvar jsts = require('jsts');\nvar normalize = require('geojson-normalize');\n\n/**\n * Calculates a buffer for input features for a given radius. Units supported are miles, kilometers, and degrees.\n *\n * @name buffer\n * @param {(Feature|FeatureCollection)} feature input to be buffered\n * @param {number} distance distance to draw the buffer\n * @param {string} unit any of the options supported by turf units\n * @return {FeatureCollection<Polygon>|FeatureCollection<MultiPolygon>|Polygon|MultiPolygon} buffered features\n *\n * @example\n * var pt = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [-90.548630, 14.616599]\n *   }\n * };\n * var unit = 'miles';\n *\n * var buffered = turf.buffer(pt, 500, unit);\n * var result = turf.featurecollection([buffered, pt]);\n *\n * //=result\n */\n\nmodule.exports = function (feature, radius, units) {\n\n    var degrees = helpers.distanceToDegrees(radius, units);\n    var fc = normalize(feature);\n    var buffered = normalize(featureCollection(fc.features.map(function (f) {\n        return bufferOp(f, degrees);\n    })));\n\n    if (buffered.features.length > 1) return buffered;\n    else if (buffered.features.length === 1) return buffered.features[0];\n};\n\nfunction bufferOp(feature, radius) {\n    var reader = new jsts.io.GeoJSONReader();\n    var geom = reader.read(feature.geometry);\n    var buffered = geom.buffer(radius);\n    var writer = new jsts.io.GeoJSONWriter();\n    buffered = writer.write(buffered);\n\n    return {\n        type: 'Feature',\n        geometry: buffered,\n        properties: {}\n    };\n}\n"},"lineCount":61}},"error":null,"hash":"6afc8de5b65b9ad2a6960ca013dd514e","cacheData":{"env":{}}}