{"id":"node_modules/turf-invariant/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-invariant\\package.json","includedInParent":true,"mtime":1557726825009}],"generated":{"js":"/**\n * Unwrap a coordinate from a Feature with a Point geometry, a Point\n * geometry, or a single coordinate.\n *\n * @param {*} obj any value\n * @returns {Array<number>} a coordinate\n */\nfunction getCoord(obj) {\n    if (Array.isArray(obj) &&\n        typeof obj[0] === 'number' &&\n        typeof obj[1] === 'number') {\n        return obj;\n    } else if (obj) {\n        if (obj.type === 'Feature' &&\n            obj.geometry &&\n            obj.geometry.type === 'Point' &&\n            Array.isArray(obj.geometry.coordinates)) {\n            return obj.geometry.coordinates;\n        } else if (obj.type === 'Point' &&\n            Array.isArray(obj.coordinates)) {\n            return obj.coordinates;\n        }\n    }\n    throw new Error('A coordinate, feature, or point geometry is required');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @alias geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias collectionOf\n * @param {FeatureCollection} featurecollection a featurecollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featurecollection, type, name) {\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featurecollection || featurecollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featurecollection.features.length; i++) {\n        var feature = featurecollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\nmodule.exports.geojsonType = geojsonType;\nmodule.exports.collectionOf = collectionOf;\nmodule.exports.featureOf = featureOf;\nmodule.exports.getCoord = getCoord;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-invariant/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-invariant/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}}],"sources":{"node_modules/turf-invariant/index.js":"/**\n * Unwrap a coordinate from a Feature with a Point geometry, a Point\n * geometry, or a single coordinate.\n *\n * @param {*} obj any value\n * @returns {Array<number>} a coordinate\n */\nfunction getCoord(obj) {\n    if (Array.isArray(obj) &&\n        typeof obj[0] === 'number' &&\n        typeof obj[1] === 'number') {\n        return obj;\n    } else if (obj) {\n        if (obj.type === 'Feature' &&\n            obj.geometry &&\n            obj.geometry.type === 'Point' &&\n            Array.isArray(obj.geometry.coordinates)) {\n            return obj.geometry.coordinates;\n        } else if (obj.type === 'Point' &&\n            Array.isArray(obj.coordinates)) {\n            return obj.coordinates;\n        }\n    }\n    throw new Error('A coordinate, feature, or point geometry is required');\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @alias geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value, type, name) {\n    if (!type || !name) throw new Error('type and name required');\n\n    if (!value || value.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + value.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature, type, name) {\n    if (!name) throw new Error('.featureOf() requires a name');\n    if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n        throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n    }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @alias collectionOf\n * @param {FeatureCollection} featurecollection a featurecollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(featurecollection, type, name) {\n    if (!name) throw new Error('.collectionOf() requires a name');\n    if (!featurecollection || featurecollection.type !== 'FeatureCollection') {\n        throw new Error('Invalid input to ' + name + ', FeatureCollection required');\n    }\n    for (var i = 0; i < featurecollection.features.length; i++) {\n        var feature = featurecollection.features[i];\n        if (!feature || feature.type !== 'Feature' || !feature.geometry) {\n            throw new Error('Invalid input to ' + name + ', Feature with geometry required');\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error('Invalid input to ' + name + ': must be a ' + type + ', given ' + feature.geometry.type);\n        }\n    }\n}\n\nmodule.exports.geojsonType = geojsonType;\nmodule.exports.collectionOf = collectionOf;\nmodule.exports.featureOf = featureOf;\nmodule.exports.getCoord = getCoord;\n"},"lineCount":94}},"error":null,"hash":"f62d93bb400ebc366a1203fe8125bab7","cacheData":{"env":{}}}