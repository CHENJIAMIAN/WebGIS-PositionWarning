{"id":"node_modules/turf-combine/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-combine\\package.json","includedInParent":true,"mtime":1557726825583},{"name":"turf-meta","loc":{"line":1,"column":19},"parent":"C:\\桌面\\new-project\\node_modules\\turf-combine\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-meta\\index.js"}],"generated":{"js":"var meta = require('turf-meta');\n\n/**\n * Combines a {@link FeatureCollection} of {@link Point},\n * {@link LineString}, or {@link Polygon} features\n * into {@link MultiPoint}, {@link MultiLineString}, or\n * {@link MultiPolygon} features.\n *\n * @name combine\n * @param {FeatureCollection<(Point|LineString|Polygon)>} fc a FeatureCollection of any type\n * @return {FeatureCollection<(MultiPoint|MultiLineString|MultiPolygon)>} a FeatureCollection of corresponding type to input\n * @example\n * var fc = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.026432, 47.49134]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.074497, 47.509548]\n *       }\n *     }\n *   ]\n * };\n *\n * var combined = turf.combine(fc);\n *\n * //=combined\n */\n\nmodule.exports = function (fc) {\n    var groups = {\n        MultiPoint: {coordinates: [], properties: []},\n        MultiLineString: {coordinates: [], properties: []},\n        MultiPolygon: {coordinates: [], properties: []}\n    };\n\n    var multiMapping = Object.keys(groups).reduce(function (memo, item) {\n        memo[item.replace('Multi', '')] = item;\n        return memo;\n    }, {});\n\n    function addToGroup(feature, key, multi) {\n        if (!multi) {\n            groups[key].coordinates.push(feature.geometry.coordinates);\n        } else {\n            groups[key].coordinates = groups[key].coordinates.concat(feature.geometry.coordinates);\n        }\n        groups[key].properties.push(feature.properties);\n    }\n\n    meta.featureEach(fc, function (feature) {\n        if (!feature.geometry) return;\n        if (groups[feature.geometry.type]) {\n            addToGroup(feature, feature.geometry.type, true);\n        } else if (multiMapping[feature.geometry.type]) {\n            addToGroup(feature, multiMapping[feature.geometry.type], false);\n        }\n    });\n\n    return {\n        type: 'FeatureCollection',\n        features: Object.keys(groups)\n            .filter(function (key) {\n                return groups[key].coordinates.length;\n            })\n            .sort()\n            .map(function (key) {\n                return {\n                    type: 'Feature',\n                    properties: {\n                        collectedProperties: groups[key].properties\n                    },\n                    geometry: {\n                        type: key,\n                        coordinates: groups[key].coordinates\n                    }\n                };\n            })\n    };\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-combine/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-combine/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}}],"sources":{"node_modules/turf-combine/index.js":"var meta = require('turf-meta');\n\n/**\n * Combines a {@link FeatureCollection} of {@link Point},\n * {@link LineString}, or {@link Polygon} features\n * into {@link MultiPoint}, {@link MultiLineString}, or\n * {@link MultiPolygon} features.\n *\n * @name combine\n * @param {FeatureCollection<(Point|LineString|Polygon)>} fc a FeatureCollection of any type\n * @return {FeatureCollection<(MultiPoint|MultiLineString|MultiPolygon)>} a FeatureCollection of corresponding type to input\n * @example\n * var fc = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.026432, 47.49134]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [19.074497, 47.509548]\n *       }\n *     }\n *   ]\n * };\n *\n * var combined = turf.combine(fc);\n *\n * //=combined\n */\n\nmodule.exports = function (fc) {\n    var groups = {\n        MultiPoint: {coordinates: [], properties: []},\n        MultiLineString: {coordinates: [], properties: []},\n        MultiPolygon: {coordinates: [], properties: []}\n    };\n\n    var multiMapping = Object.keys(groups).reduce(function (memo, item) {\n        memo[item.replace('Multi', '')] = item;\n        return memo;\n    }, {});\n\n    function addToGroup(feature, key, multi) {\n        if (!multi) {\n            groups[key].coordinates.push(feature.geometry.coordinates);\n        } else {\n            groups[key].coordinates = groups[key].coordinates.concat(feature.geometry.coordinates);\n        }\n        groups[key].properties.push(feature.properties);\n    }\n\n    meta.featureEach(fc, function (feature) {\n        if (!feature.geometry) return;\n        if (groups[feature.geometry.type]) {\n            addToGroup(feature, feature.geometry.type, true);\n        } else if (multiMapping[feature.geometry.type]) {\n            addToGroup(feature, multiMapping[feature.geometry.type], false);\n        }\n    });\n\n    return {\n        type: 'FeatureCollection',\n        features: Object.keys(groups)\n            .filter(function (key) {\n                return groups[key].coordinates.length;\n            })\n            .sort()\n            .map(function (key) {\n                return {\n                    type: 'Feature',\n                    properties: {\n                        collectedProperties: groups[key].properties\n                    },\n                    geometry: {\n                        type: key,\n                        coordinates: groups[key].coordinates\n                    }\n                };\n            })\n    };\n};\n"},"lineCount":90}},"error":null,"hash":"ff8c4ee3bf2e05dd47ba919732918a8c","cacheData":{"env":{}}}