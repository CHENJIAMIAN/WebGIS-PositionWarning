{"id":"node_modules/convex-hull/lib/chnd.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\convex-hull\\package.json","includedInParent":true,"mtime":1557726825790},{"name":"incremental-convex-hull","loc":{"line":5,"column":18},"parent":"C:\\桌面\\new-project\\node_modules\\convex-hull\\lib\\chnd.js","resolved":"C:\\桌面\\new-project\\node_modules\\incremental-convex-hull\\ich.js"},{"name":"affine-hull","loc":{"line":6,"column":18},"parent":"C:\\桌面\\new-project\\node_modules\\convex-hull\\lib\\chnd.js","resolved":"C:\\桌面\\new-project\\node_modules\\affine-hull\\aff.js"}],"generated":{"js":"'use strict'\n\nmodule.exports = convexHullnD\n\nvar ich = require('incremental-convex-hull')\nvar aff = require('affine-hull')\n\nfunction permute(points, front) {\n  var n = points.length\n  var npoints = new Array(n)\n  for(var i=0; i<front.length; ++i) {\n    npoints[i] = points[front[i]]\n  }\n  var ptr = front.length\n  for(var i=0; i<n; ++i) {\n    if(front.indexOf(i) < 0) {\n      npoints[ptr++] = points[i]\n    }\n  }\n  return npoints\n}\n\nfunction invPermute(cells, front) {\n  var nc = cells.length\n  var nf = front.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var x = c[j]\n      if(x < nf) {\n        c[j] = front[x]\n      } else {\n        x = x - nf\n        for(var k=0; k<nf; ++k) {\n          if(x >= front[k]) {\n            x += 1\n          }\n        }\n        c[j] = x\n      }\n    }\n  }\n  return cells\n}\n\nfunction convexHullnD(points, d) {\n  try {\n    return ich(points, true)\n  } catch(e) {\n    //If point set is degenerate, try to find a basis and rerun it\n    var ah = aff(points)\n    if(ah.length <= d) {\n      //No basis, no try\n      return []\n    }\n    var npoints = permute(points, ah)\n    var nhull   = ich(npoints, true)\n    return invPermute(nhull, ah)\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/convex-hull/lib/chnd.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}}],"sources":{"node_modules/convex-hull/lib/chnd.js":"'use strict'\n\nmodule.exports = convexHullnD\n\nvar ich = require('incremental-convex-hull')\nvar aff = require('affine-hull')\n\nfunction permute(points, front) {\n  var n = points.length\n  var npoints = new Array(n)\n  for(var i=0; i<front.length; ++i) {\n    npoints[i] = points[front[i]]\n  }\n  var ptr = front.length\n  for(var i=0; i<n; ++i) {\n    if(front.indexOf(i) < 0) {\n      npoints[ptr++] = points[i]\n    }\n  }\n  return npoints\n}\n\nfunction invPermute(cells, front) {\n  var nc = cells.length\n  var nf = front.length\n  for(var i=0; i<nc; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var x = c[j]\n      if(x < nf) {\n        c[j] = front[x]\n      } else {\n        x = x - nf\n        for(var k=0; k<nf; ++k) {\n          if(x >= front[k]) {\n            x += 1\n          }\n        }\n        c[j] = x\n      }\n    }\n  }\n  return cells\n}\n\nfunction convexHullnD(points, d) {\n  try {\n    return ich(points, true)\n  } catch(e) {\n    //If point set is degenerate, try to find a basis and rerun it\n    var ah = aff(points)\n    if(ah.length <= d) {\n      //No basis, no try\n      return []\n    }\n    var npoints = permute(points, ah)\n    var nhull   = ich(npoints, true)\n    return invPermute(nhull, ah)\n  }\n}"},"lineCount":60}},"error":null,"hash":"d4d214a35e707e9fe36fa279786592ec","cacheData":{"env":{}}}