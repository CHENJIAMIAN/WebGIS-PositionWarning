{"id":"node_modules/turf-meta/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-meta\\package.json","includedInParent":true,"mtime":1557726825032}],"generated":{"js":"/**\n * Iterate over coordinates in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var point = { type: 'Point', coordinates: [0, 0] };\n * coordEach(point, function(coords) {\n *   // coords is equal to [0, 0]\n * });\n */\nfunction coordEach(layer, callback, excludeWrapCoord) {\n    var i, j, k, g, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        isGeometryCollection,\n        isFeatureCollection = layer.type === 'FeatureCollection',\n        isFeature = layer.type === 'Feature',\n        stop = isFeatureCollection ? layer.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :\n        (isFeature ? layer.geometry : layer));\n        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n            coords = geometry.coordinates;\n\n            wrapShrink = (excludeWrapCoord &&\n                (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon')) ?\n                1 : 0;\n\n            if (geometry.type === 'Point') {\n                callback(coords);\n            } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {\n                for (j = 0; j < coords.length; j++) callback(coords[j]);\n            } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length - wrapShrink; k++)\n                        callback(coords[j][k]);\n            } else if (geometry.type === 'MultiPolygon') {\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length; k++)\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++)\n                            callback(coords[j][k][l]);\n            } else {\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\nmodule.exports.coordEach = coordEach;\n\n/**\n * Reduce coordinates in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all coordinates is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, value) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @return {*} combined value\n */\nfunction coordReduce(layer, callback, memo, excludeWrapCoord) {\n    coordEach(layer, function (coord) {\n        memo = callback(memo, coord);\n    }, excludeWrapCoord);\n    return memo;\n}\nmodule.exports.coordReduce = coordReduce;\n\n/**\n * Iterate over property objects in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var point = { type: 'Feature', geometry: null, properties: { foo: 1 } };\n * propEach(point, function(props) {\n *   // props is equal to { foo: 1}\n * });\n */\nfunction propEach(layer, callback) {\n    var i;\n    switch (layer.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < layer.features.length; i++) {\n            callback(layer.features[i].properties);\n        }\n        break;\n    case 'Feature':\n        callback(layer.properties);\n        break;\n    }\n}\nmodule.exports.propEach = propEach;\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, coord) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n * @return {*} combined value\n */\nfunction propReduce(layer, callback, memo) {\n    propEach(layer, function (prop) {\n        memo = callback(memo, prop);\n    });\n    return memo;\n}\nmodule.exports.propReduce = propReduce;\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var feature = { type: 'Feature', geometry: null, properties: {} };\n * featureEach(feature, function(feature) {\n *   // feature == feature\n * });\n */\nfunction featureEach(layer, callback) {\n    if (layer.type === 'Feature') {\n        callback(layer);\n    } else if (layer.type === 'FeatureCollection') {\n        for (var i = 0; i < layer.features.length; i++) {\n            callback(layer.features[i]);\n        }\n    }\n}\nmodule.exports.featureEach = featureEach;\n\n/**\n * Get all coordinates from any GeoJSON object, returning an array of coordinate\n * arrays.\n * @param {Object} layer any GeoJSON object\n * @return {Array<Array<Number>>} coordinate position array\n */\nfunction coordAll(layer) {\n    var coords = [];\n    coordEach(layer, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\nmodule.exports.coordAll = coordAll;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-meta/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/turf-meta/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}}],"sources":{"node_modules/turf-meta/index.js":"/**\n * Iterate over coordinates in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @example\n * var point = { type: 'Point', coordinates: [0, 0] };\n * coordEach(point, function(coords) {\n *   // coords is equal to [0, 0]\n * });\n */\nfunction coordEach(layer, callback, excludeWrapCoord) {\n    var i, j, k, g, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        isGeometryCollection,\n        isFeatureCollection = layer.type === 'FeatureCollection',\n        isFeature = layer.type === 'Feature',\n        stop = isFeatureCollection ? layer.features.length : 1;\n\n  // This logic may look a little weird. The reason why it is that way\n  // is because it's trying to be fast. GeoJSON supports multiple kinds\n  // of objects at its root: FeatureCollection, Features, Geometries.\n  // This function has the responsibility of handling all of them, and that\n  // means that some of the `for` loops you see below actually just don't apply\n  // to certain inputs. For instance, if you give this just a\n  // Point geometry, then both loops are short-circuited and all we do\n  // is gradually rename the input until it's called 'geometry'.\n  //\n  // This also aims to allocate as few resources as possible: just a\n  // few numbers and booleans, rather than any temporary arrays as would\n  // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? layer.features[i].geometry :\n        (isFeature ? layer.geometry : layer));\n        isGeometryCollection = geometryMaybeCollection.type === 'GeometryCollection';\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n            geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n            coords = geometry.coordinates;\n\n            wrapShrink = (excludeWrapCoord &&\n                (geometry.type === 'Polygon' || geometry.type === 'MultiPolygon')) ?\n                1 : 0;\n\n            if (geometry.type === 'Point') {\n                callback(coords);\n            } else if (geometry.type === 'LineString' || geometry.type === 'MultiPoint') {\n                for (j = 0; j < coords.length; j++) callback(coords[j]);\n            } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length - wrapShrink; k++)\n                        callback(coords[j][k]);\n            } else if (geometry.type === 'MultiPolygon') {\n                for (j = 0; j < coords.length; j++)\n                    for (k = 0; k < coords[j].length; k++)\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++)\n                            callback(coords[j][k][l]);\n            } else {\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\nmodule.exports.coordEach = coordEach;\n\n/**\n * Reduce coordinates in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all coordinates is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, value) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n * @param {boolean=} excludeWrapCoord whether or not to include\n * the final coordinate of LinearRings that wraps the ring in its iteration.\n * @return {*} combined value\n */\nfunction coordReduce(layer, callback, memo, excludeWrapCoord) {\n    coordEach(layer, function (coord) {\n        memo = callback(memo, coord);\n    }, excludeWrapCoord);\n    return memo;\n}\nmodule.exports.coordReduce = coordReduce;\n\n/**\n * Iterate over property objects in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var point = { type: 'Feature', geometry: null, properties: { foo: 1 } };\n * propEach(point, function(props) {\n *   // props is equal to { foo: 1}\n * });\n */\nfunction propEach(layer, callback) {\n    var i;\n    switch (layer.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < layer.features.length; i++) {\n            callback(layer.features[i].properties);\n        }\n        break;\n    case 'Feature':\n        callback(layer.properties);\n        break;\n    }\n}\nmodule.exports.propEach = propEach;\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (memo, coord) and returns\n * a new memo\n * @param {*} memo the starting value of memo: can be any type.\n * @return {*} combined value\n */\nfunction propReduce(layer, callback, memo) {\n    propEach(layer, function (prop) {\n        memo = callback(memo, prop);\n    });\n    return memo;\n}\nmodule.exports.propReduce = propReduce;\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @param {Object} layer any GeoJSON object\n * @param {Function} callback a method that takes (value)\n * @example\n * var feature = { type: 'Feature', geometry: null, properties: {} };\n * featureEach(feature, function(feature) {\n *   // feature == feature\n * });\n */\nfunction featureEach(layer, callback) {\n    if (layer.type === 'Feature') {\n        callback(layer);\n    } else if (layer.type === 'FeatureCollection') {\n        for (var i = 0; i < layer.features.length; i++) {\n            callback(layer.features[i]);\n        }\n    }\n}\nmodule.exports.featureEach = featureEach;\n\n/**\n * Get all coordinates from any GeoJSON object, returning an array of coordinate\n * arrays.\n * @param {Object} layer any GeoJSON object\n * @return {Array<Array<Number>>} coordinate position array\n */\nfunction coordAll(layer) {\n    var coords = [];\n    coordEach(layer, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\nmodule.exports.coordAll = coordAll;\n"},"lineCount":177}},"error":null,"hash":"b017392a02feecf2ec8d60a09b4f8fd0","cacheData":{"env":{}}}