{"id":"node_modules/ol/format/filter/EqualTo.js","dependencies":[{"name":"C:\\桌面\\new-project\\node_modules\\ol\\format\\filter\\EqualTo.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557894127925},{"name":"C:\\桌面\\new-project\\node_modules\\ol\\package.json","includedInParent":true,"mtime":1557726846824},{"name":"./ComparisonBinary.js","loc":{"line":4,"column":29},"parent":"C:\\桌面\\new-project\\node_modules\\ol\\format\\filter\\EqualTo.js","resolved":"C:\\桌面\\new-project\\node_modules\\ol\\format\\filter\\ComparisonBinary.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ComparisonBinary = _interopRequireDefault(require(\"./ComparisonBinary.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @module ol/format/filter/EqualTo\n */\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nvar EqualTo =\n/*@__PURE__*/\nfunction (ComparisonBinary) {\n  function EqualTo(propertyName, expression, opt_matchCase) {\n    ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n  if (ComparisonBinary) EqualTo.__proto__ = ComparisonBinary;\n  EqualTo.prototype = Object.create(ComparisonBinary && ComparisonBinary.prototype);\n  EqualTo.prototype.constructor = EqualTo;\n  return EqualTo;\n}(_ComparisonBinary.default);\n\nvar _default = EqualTo;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":6},"generated":{"line":21,"column":4}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":13},"generated":{"line":21,"column":11}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":22,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":23,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":23,"column":10}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":23,"column":26}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":23,"column":28}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":11}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":18}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":14},"generated":{"line":24,"column":19}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":31}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":28},"generated":{"line":24,"column":33}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":43}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":40},"generated":{"line":24,"column":45}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":58}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":55},"generated":{"line":24,"column":60}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":0}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":4}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":20}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":21}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":25}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":9},"generated":{"line":25,"column":26}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":30}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":10},"generated":{"line":25,"column":32}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":51}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":31},"generated":{"line":25,"column":53}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":65}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":45},"generated":{"line":25,"column":67}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":77}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":57},"generated":{"line":25,"column":79}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":"super","original":{"line":19,"column":4},"generated":{"line":25,"column":92}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":20,"column":3},"generated":{"line":30,"column":9}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":20,"column":3},"generated":{"line":30,"column":10}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":20,"column":3},"generated":{"line":30,"column":20}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":20,"column":3},"generated":{"line":30,"column":34}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":32,"column":1}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":32,"column":2}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":38},"generated":{"line":32,"column":27}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":32,"column":28}},{"source":"../../../../src/ol/format/filter/EqualTo.js","name":null,"original":{"line":24,"column":15},"generated":{"line":34,"column":15}}],"sources":{"../../../../src/ol/format/filter/EqualTo.js":"/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default EqualTo;\n"},"lineCount":null}},"error":null,"hash":"9bfca853574a8ccc3555961428f4d493","cacheData":{"env":{}}}