{"id":"node_modules/simplicial-complex/topology.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\simplicial-complex\\package.json","includedInParent":true,"mtime":1557726825747},{"name":"bit-twiddle","loc":{"line":3,"column":24},"parent":"C:\\桌面\\new-project\\node_modules\\simplicial-complex\\topology.js","resolved":"C:\\桌面\\new-project\\node_modules\\bit-twiddle\\twiddle.js"},{"name":"union-find","loc":{"line":4,"column":24},"parent":"C:\\桌面\\new-project\\node_modules\\simplicial-complex\\topology.js","resolved":"C:\\桌面\\new-project\\node_modules\\union-find\\index.js"}],"generated":{"js":"\"use strict\"; \"use restrict\";\n\nvar bits      = require(\"bit-twiddle\")\n  , UnionFind = require(\"union-find\")\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    d = max(d, cells[i].length)\n  }\n  return d-1\n}\nexports.dimension = dimension\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0, jl=c.length; j<jl; ++j) {\n      vc = max(vc, c[j])\n    }\n  }\n  return vc+1\n}\nexports.countVertices = countVertices\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length)\n  for(var i=0, il=cells.length; i<il; ++i) {\n    ncells[i] = cells[i].slice(0)\n  }\n  return ncells\n}\nexports.cloneCells = cloneCells\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length\n    , t = a.length - b.length\n    , min = Math.min\n  if(t) {\n    return t\n  }\n  switch(n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0]+a[1]-b[0]-b[1]\n      if(d) {\n        return d\n      }\n      return min(a[0],a[1]) - min(b[0],b[1])\n    case 3:\n      var l1 = a[0]+a[1]\n        , m1 = b[0]+b[1]\n      d = l1+a[2] - (m1+b[2])\n      if(d) {\n        return d\n      }\n      var l0 = min(a[0], a[1])\n        , m0 = min(b[0], b[1])\n        , d  = min(l0, a[2]) - min(m0, b[2])\n      if(d) {\n        return d\n      }\n      return min(l0+a[2], l1) - min(m0+b[2], m1)\n    \n    //TODO: Maybe optimize n=4 as well?\n    \n    default:\n      var as = a.slice(0)\n      as.sort()\n      var bs = b.slice(0)\n      bs.sort()\n      for(var i=0; i<n; ++i) {\n        t = as[i] - bs[i]\n        if(t) {\n          return t\n        }\n      }\n      return 0\n  }\n}\nexports.compareCells = compareCells\n\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0])\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if(attr) {\n    var len = cells.length\n    var zipped = new Array(len)\n    for(var i=0; i<len; ++i) {\n      zipped[i] = [cells[i], attr[i]]\n    }\n    zipped.sort(compareZipped)\n    for(var i=0; i<len; ++i) {\n      cells[i] = zipped[i][0]\n      attr[i] = zipped[i][1]\n    }\n    return cells\n  } else {\n    cells.sort(compareCells)\n    return cells\n  }\n}\nexports.normalize = normalize\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if(cells.length === 0) {\n    return []\n  }\n  var ptr = 1\n    , len = cells.length\n  for(var i=1; i<len; ++i) {\n    var a = cells[i]\n    if(compareCells(a, cells[i-1])) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      cells[ptr++] = a\n    }\n  }\n  cells.length = ptr\n  return cells\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0\n    , hi = cells.length-1\n    , r  = -1\n  while (lo <= hi) {\n    var mid = (lo + hi) >> 1\n      , s   = compareCells(cells[mid], c)\n    if(s <= 0) {\n      if(s === 0) {\n        r = mid\n      }\n      lo = mid + 1\n    } else if(s > 0) {\n      hi = mid - 1\n    }\n  }\n  return r\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length)\n  for(var i=0, il=index.length; i<il; ++i) {\n    index[i] = []\n  }\n  var b = []\n  for(var i=0, n=to_cells.length; i<n; ++i) {\n    var c = to_cells[i]\n    var cl = c.length\n    for(var k=1, kn=(1<<cl); k<kn; ++k) {\n      b.length = bits.popCount(k)\n      var l = 0\n      for(var j=0; j<cl; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      var idx=findCell(from_cells, b)\n      if(idx < 0) {\n        continue\n      }\n      while(true) {\n        index[idx++].push(i)\n        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break\n        }\n      }\n    }\n  }\n  return index\n}\nexports.incidence = incidence\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if(!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0)\n  }\n  var res = new Array(vertex_count)\n  for(var i=0; i<vertex_count; ++i) {\n    res[i] = []\n  }\n  for(var i=0, len=cells.length; i<len; ++i) {\n    var c = cells[i]\n    for(var j=0, cl=c.length; j<cl; ++j) {\n      res[c[j]].push(i)\n    }\n  }\n  return res\n}\nexports.dual = dual\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = []\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n      , cl = c.length|0\n    for(var j=1, jl=(1<<cl); j<jl; ++j) {\n      var b = []\n      for(var k=0; k<cl; ++k) {\n        if((j >>> k) & 1) {\n          b.push(c[k])\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.explode = explode\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if(n < 0) {\n    return []\n  }\n  var result = []\n    , k0     = (1<<(n+1))-1\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {\n      var b = new Array(n+1)\n        , l = 0\n      for(var j=0; j<c.length; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = []\n  for(var i=0,il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0,cl=c.length; j<cl; ++j) {\n      var b = new Array(c.length-1)\n      for(var k=0, l=0; k<cl; ++k) {\n        if(k !== j) {\n          b[l++] = c[k]\n        }\n      }\n      res.push(b)\n    }\n  }\n  return normalize(res)\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(c[j], c[k])\n      }\n    }\n  }\n  var components = []\n    , component_labels = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(cells[i][0])\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices  = unique(normalize(skeleton(cells, 0)))\n    , labels    = new UnionFind(vertices.length)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var vj = findCell(vertices, [c[j]])\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]))\n      }\n    }\n  }\n  var components        = []\n    , component_labels  = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if(vertex_count) {\n    return connectedComponents_dense(cells, vertex_count)\n  }\n  return connectedComponents_sparse(cells)\n}\nexports.connectedComponents = connectedComponents\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/simplicial-complex/topology.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/simplicial-complex/topology.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}}],"sources":{"node_modules/simplicial-complex/topology.js":"\"use strict\"; \"use restrict\";\n\nvar bits      = require(\"bit-twiddle\")\n  , UnionFind = require(\"union-find\")\n\n//Returns the dimension of a cell complex\nfunction dimension(cells) {\n  var d = 0\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    d = max(d, cells[i].length)\n  }\n  return d-1\n}\nexports.dimension = dimension\n\n//Counts the number of vertices in faces\nfunction countVertices(cells) {\n  var vc = -1\n    , max = Math.max\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0, jl=c.length; j<jl; ++j) {\n      vc = max(vc, c[j])\n    }\n  }\n  return vc+1\n}\nexports.countVertices = countVertices\n\n//Returns a deep copy of cells\nfunction cloneCells(cells) {\n  var ncells = new Array(cells.length)\n  for(var i=0, il=cells.length; i<il; ++i) {\n    ncells[i] = cells[i].slice(0)\n  }\n  return ncells\n}\nexports.cloneCells = cloneCells\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n  var n = a.length\n    , t = a.length - b.length\n    , min = Math.min\n  if(t) {\n    return t\n  }\n  switch(n) {\n    case 0:\n      return 0;\n    case 1:\n      return a[0] - b[0];\n    case 2:\n      var d = a[0]+a[1]-b[0]-b[1]\n      if(d) {\n        return d\n      }\n      return min(a[0],a[1]) - min(b[0],b[1])\n    case 3:\n      var l1 = a[0]+a[1]\n        , m1 = b[0]+b[1]\n      d = l1+a[2] - (m1+b[2])\n      if(d) {\n        return d\n      }\n      var l0 = min(a[0], a[1])\n        , m0 = min(b[0], b[1])\n        , d  = min(l0, a[2]) - min(m0, b[2])\n      if(d) {\n        return d\n      }\n      return min(l0+a[2], l1) - min(m0+b[2], m1)\n    \n    //TODO: Maybe optimize n=4 as well?\n    \n    default:\n      var as = a.slice(0)\n      as.sort()\n      var bs = b.slice(0)\n      bs.sort()\n      for(var i=0; i<n; ++i) {\n        t = as[i] - bs[i]\n        if(t) {\n          return t\n        }\n      }\n      return 0\n  }\n}\nexports.compareCells = compareCells\n\nfunction compareZipped(a, b) {\n  return compareCells(a[0], b[0])\n}\n\n//Puts a cell complex into normal order for the purposes of findCell queries\nfunction normalize(cells, attr) {\n  if(attr) {\n    var len = cells.length\n    var zipped = new Array(len)\n    for(var i=0; i<len; ++i) {\n      zipped[i] = [cells[i], attr[i]]\n    }\n    zipped.sort(compareZipped)\n    for(var i=0; i<len; ++i) {\n      cells[i] = zipped[i][0]\n      attr[i] = zipped[i][1]\n    }\n    return cells\n  } else {\n    cells.sort(compareCells)\n    return cells\n  }\n}\nexports.normalize = normalize\n\n//Removes all duplicate cells in the complex\nfunction unique(cells) {\n  if(cells.length === 0) {\n    return []\n  }\n  var ptr = 1\n    , len = cells.length\n  for(var i=1; i<len; ++i) {\n    var a = cells[i]\n    if(compareCells(a, cells[i-1])) {\n      if(i === ptr) {\n        ptr++\n        continue\n      }\n      cells[ptr++] = a\n    }\n  }\n  cells.length = ptr\n  return cells\n}\nexports.unique = unique;\n\n//Finds a cell in a normalized cell complex\nfunction findCell(cells, c) {\n  var lo = 0\n    , hi = cells.length-1\n    , r  = -1\n  while (lo <= hi) {\n    var mid = (lo + hi) >> 1\n      , s   = compareCells(cells[mid], c)\n    if(s <= 0) {\n      if(s === 0) {\n        r = mid\n      }\n      lo = mid + 1\n    } else if(s > 0) {\n      hi = mid - 1\n    }\n  }\n  return r\n}\nexports.findCell = findCell;\n\n//Builds an index for an n-cell.  This is more general than dual, but less efficient\nfunction incidence(from_cells, to_cells) {\n  var index = new Array(from_cells.length)\n  for(var i=0, il=index.length; i<il; ++i) {\n    index[i] = []\n  }\n  var b = []\n  for(var i=0, n=to_cells.length; i<n; ++i) {\n    var c = to_cells[i]\n    var cl = c.length\n    for(var k=1, kn=(1<<cl); k<kn; ++k) {\n      b.length = bits.popCount(k)\n      var l = 0\n      for(var j=0; j<cl; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      var idx=findCell(from_cells, b)\n      if(idx < 0) {\n        continue\n      }\n      while(true) {\n        index[idx++].push(i)\n        if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {\n          break\n        }\n      }\n    }\n  }\n  return index\n}\nexports.incidence = incidence\n\n//Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices\nfunction dual(cells, vertex_count) {\n  if(!vertex_count) {\n    return incidence(unique(skeleton(cells, 0)), cells, 0)\n  }\n  var res = new Array(vertex_count)\n  for(var i=0; i<vertex_count; ++i) {\n    res[i] = []\n  }\n  for(var i=0, len=cells.length; i<len; ++i) {\n    var c = cells[i]\n    for(var j=0, cl=c.length; j<cl; ++j) {\n      res[c[j]].push(i)\n    }\n  }\n  return res\n}\nexports.dual = dual\n\n//Enumerates all cells in the complex\nfunction explode(cells) {\n  var result = []\n  for(var i=0, il=cells.length; i<il; ++i) {\n    var c = cells[i]\n      , cl = c.length|0\n    for(var j=1, jl=(1<<cl); j<jl; ++j) {\n      var b = []\n      for(var k=0; k<cl; ++k) {\n        if((j >>> k) & 1) {\n          b.push(c[k])\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.explode = explode\n\n//Enumerates all of the n-cells of a cell complex\nfunction skeleton(cells, n) {\n  if(n < 0) {\n    return []\n  }\n  var result = []\n    , k0     = (1<<(n+1))-1\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {\n      var b = new Array(n+1)\n        , l = 0\n      for(var j=0; j<c.length; ++j) {\n        if(k & (1<<j)) {\n          b[l++] = c[j]\n        }\n      }\n      result.push(b)\n    }\n  }\n  return normalize(result)\n}\nexports.skeleton = skeleton;\n\n//Computes the boundary of all cells, does not remove duplicates\nfunction boundary(cells) {\n  var res = []\n  for(var i=0,il=cells.length; i<il; ++i) {\n    var c = cells[i]\n    for(var j=0,cl=c.length; j<cl; ++j) {\n      var b = new Array(c.length-1)\n      for(var k=0, l=0; k<cl; ++k) {\n        if(k !== j) {\n          b[l++] = c[k]\n        }\n      }\n      res.push(b)\n    }\n  }\n  return normalize(res)\n}\nexports.boundary = boundary;\n\n//Computes connected components for a dense cell complex\nfunction connectedComponents_dense(cells, vertex_count) {\n  var labels = new UnionFind(vertex_count)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(c[j], c[k])\n      }\n    }\n  }\n  var components = []\n    , component_labels = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(cells[i][0])\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a sparse graph\nfunction connectedComponents_sparse(cells) {\n  var vertices  = unique(normalize(skeleton(cells, 0)))\n    , labels    = new UnionFind(vertices.length)\n  for(var i=0; i<cells.length; ++i) {\n    var c = cells[i]\n    for(var j=0; j<c.length; ++j) {\n      var vj = findCell(vertices, [c[j]])\n      for(var k=j+1; k<c.length; ++k) {\n        labels.link(vj, findCell(vertices, [c[k]]))\n      }\n    }\n  }\n  var components        = []\n    , component_labels  = labels.ranks\n  for(var i=0; i<component_labels.length; ++i) {\n    component_labels[i] = -1\n  }\n  for(var i=0; i<cells.length; ++i) {\n    var l = labels.find(findCell(vertices, [cells[i][0]]));\n    if(component_labels[l] < 0) {\n      component_labels[l] = components.length\n      components.push([cells[i].slice(0)])\n    } else {\n      components[component_labels[l]].push(cells[i].slice(0))\n    }\n  }\n  return components\n}\n\n//Computes connected components for a cell complex\nfunction connectedComponents(cells, vertex_count) {\n  if(vertex_count) {\n    return connectedComponents_dense(cells, vertex_count)\n  }\n  return connectedComponents_sparse(cells)\n}\nexports.connectedComponents = connectedComponents\n"},"lineCount":343}},"error":null,"hash":"d0e3441ab641d39227ff3a48a0b256e6","cacheData":{"env":{}}}