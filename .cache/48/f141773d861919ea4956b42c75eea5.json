{"id":"node_modules/turf-tag/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-tag\\package.json","includedInParent":true,"mtime":1557726826216},{"name":"turf-inside","loc":{"line":1,"column":21},"parent":"C:\\桌面\\new-project\\node_modules\\turf-tag\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-inside\\index.js"}],"generated":{"js":"var inside = require('turf-inside');\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon>} polygons input polygons\n * @param {string} field property in `polygons` to add to joined Point features\n * @param {string} outField property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var bbox = [0, 0, 10, 10];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.triangleGrid(bbox, 50, 'miles');\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\nmodule.exports = function (points, polygons, field, outField) {\n    // prevent mutations\n    points = JSON.parse(JSON.stringify(points));\n    polygons = JSON.parse(JSON.stringify(polygons));\n    points.features.forEach(function (pt) {\n        if (!pt.properties) {\n            pt.properties = {};\n        }\n        polygons.features.forEach(function (poly) {\n            if (pt.properties[outField] === undefined) {\n                var isInside = inside(pt, poly);\n                if (isInside) {\n                    pt.properties[outField] = poly.properties[field];\n                }\n            }\n        });\n    });\n    return points;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-tag/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-tag/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}}],"sources":{"node_modules/turf-tag/index.js":"var inside = require('turf-inside');\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and performs a spatial join.\n *\n * @name tag\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon>} polygons input polygons\n * @param {string} field property in `polygons` to add to joined Point features\n * @param {string} outField property in `points` in which to store joined property from `polygons\n * @return {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var bbox = [0, 0, 10, 10];\n * // create a triangular grid of polygons\n * var triangleGrid = turf.triangleGrid(bbox, 50, 'miles');\n * triangleGrid.features.forEach(function(f) {\n *   f.properties.fill = '#' +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16) +\n *     (~~(Math.random() * 16)).toString(16);\n *   f.properties.stroke = 0;\n *   f.properties['fill-opacity'] = 1;\n * });\n * var randomPoints = turf.random('point', 30, {\n *   bbox: bbox\n * });\n * var both = turf.featurecollection(\n *   triangleGrid.features.concat(randomPoints.features));\n *\n * //=both\n *\n * var tagged = turf.tag(randomPoints, triangleGrid,\n *                       'fill', 'marker-color');\n *\n * //=tagged\n */\nmodule.exports = function (points, polygons, field, outField) {\n    // prevent mutations\n    points = JSON.parse(JSON.stringify(points));\n    polygons = JSON.parse(JSON.stringify(polygons));\n    points.features.forEach(function (pt) {\n        if (!pt.properties) {\n            pt.properties = {};\n        }\n        polygons.features.forEach(function (poly) {\n            if (pt.properties[outField] === undefined) {\n                var isInside = inside(pt, poly);\n                if (isInside) {\n                    pt.properties[outField] = poly.properties[field];\n                }\n            }\n        });\n    });\n    return points;\n};\n"},"lineCount":56}},"error":null,"hash":"5c76ca513aebb41690c83f899b492c0d","cacheData":{"env":{}}}