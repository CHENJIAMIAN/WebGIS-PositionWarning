{"id":"node_modules/turf-square-grid/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-square-grid\\package.json","includedInParent":true,"mtime":1557726826214},{"name":"turf-helpers","loc":{"line":3,"column":22},"parent":"C:\\桌面\\new-project\\node_modules\\turf-square-grid\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"},{"name":"turf-distance","loc":{"line":4,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-square-grid\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"}],"generated":{"js":"var featurecollection = require('turf-helpers').featureCollection;\nvar point = require('turf-helpers').point;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a set of square {@link Polygon|polygons} in a grid.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize width of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\nmodule.exports = function squareGrid(bbox, cellSize, units) {\n    var fc = featurecollection([]);\n    var xFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            var cellPoly = polygon([[\n                [currentX, currentY],\n                [currentX, currentY + cellHeight],\n                [currentX + cellWidth, currentY + cellHeight],\n                [currentX + cellWidth, currentY],\n                [currentX, currentY]\n            ]]);\n            fc.features.push(cellPoly);\n\n            currentY += cellHeight;\n        }\n        currentX += cellWidth;\n    }\n\n    return fc;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-square-grid/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-square-grid/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"node_modules/turf-square-grid/index.js":"var featurecollection = require('turf-helpers').featureCollection;\nvar point = require('turf-helpers').point;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\n\n/**\n * Takes a bounding box and a cell depth and returns a set of square {@link Polygon|polygons} in a grid.\n *\n * @name squareGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSize width of each cell\n * @param {string} units units to use for cellWidth\n * @return {FeatureCollection<Polygon>} grid a grid of polygons\n * @example\n * var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\n * var cellWidth = 10;\n * var units = 'miles';\n *\n * var squareGrid = turf.squareGrid(extent, cellWidth, units);\n *\n * //=squareGrid\n */\nmodule.exports = function squareGrid(bbox, cellSize, units) {\n    var fc = featurecollection([]);\n    var xFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            var cellPoly = polygon([[\n                [currentX, currentY],\n                [currentX, currentY + cellHeight],\n                [currentX + cellWidth, currentY + cellHeight],\n                [currentX + cellWidth, currentY],\n                [currentX, currentY]\n            ]]);\n            fc.features.push(cellPoly);\n\n            currentY += cellHeight;\n        }\n        currentX += cellWidth;\n    }\n\n    return fc;\n};\n"},"lineCount":50}},"error":null,"hash":"b9ab8662362efb1191be703e26b8fc48","cacheData":{"env":{}}}