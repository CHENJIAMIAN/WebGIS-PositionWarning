{"id":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557670107923},{"name":"C:\\桌面\\new-project\\node_modules\\jsdom\\node_modules\\data-urls\\node_modules\\abab\\package.json","includedInParent":true,"mtime":1557646988877}],"generated":{"js":"\"use strict\";\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"A\".charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"a\".charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - \"0\".charCodeAt(0) + 52;\n  }\n  if (chr === \"+\") {\n    return 62;\n  }\n  if (chr === \"/\") {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n  return undefined;\n}\n\nmodule.exports = atob;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}}],"sources":{"node_modules/jsdom/node_modules/data-urls/node_modules/abab/lib/atob.js":"\"use strict\";\n\n/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(data) {\n  // Web IDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to using a template literal.\n  data = `${data}`;\n  // \"Remove all ASCII whitespace from data.\"\n  data = data.replace(/[ \\t\\n\\f\\r]/g, \"\");\n  // \"If data's length divides by 4 leaving no remainder, then: if data ends\n  // with one or two U+003D (=) code points, then remove them from data.\"\n  if (data.length % 4 === 0) {\n    data = data.replace(/==?$/, \"\");\n  }\n  // \"If data's length divides by 4 leaving a remainder of 1, then return\n  // failure.\"\n  //\n  // \"If data contains a code point that is not one of\n  //\n  // U+002B (+)\n  // U+002F (/)\n  // ASCII alphanumeric\n  //\n  // then return failure.\"\n  if (data.length % 4 === 1 || /[^+/0-9A-Za-z]/.test(data)) {\n    return null;\n  }\n  // \"Let output be an empty byte sequence.\"\n  let output = \"\";\n  // \"Let buffer be an empty buffer that can have bits appended to it.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  let buffer = 0;\n  let accumulatedBits = 0;\n  // \"Let position be a position variable for data, initially pointing at the\n  // start of data.\"\n  //\n  // \"While position does not point past the end of data:\"\n  for (let i = 0; i < data.length; i++) {\n    // \"Find the code point pointed to by position in the second column of\n    // Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given in\n    // the first cell of the same row.\n    //\n    // \"Append to buffer the six bits corresponding to n, most significant bit\n    // first.\"\n    //\n    // atobLookup() implements the table from RFC 4648.\n    buffer <<= 6;\n    buffer |= atobLookup(data[i]);\n    accumulatedBits += 6;\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append three bytes with values equal to those\n    // numbers to output, in the same order, and then empty buffer.\"\n    if (accumulatedBits === 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by 1.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it contains\n  // 12 bits, then discard the last four and interpret the remaining eight as\n  // an 8-bit big-endian number. If it contains 18 bits, then discard the last\n  // two and interpret the remaining 16 as two 8-bit big-endian numbers. Append\n  // the one or two bytes with values equal to those one or two numbers to\n  // output, in the same order.\"\n  if (accumulatedBits === 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits === 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"A\".charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - \"a\".charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - \"0\".charCodeAt(0) + 52;\n  }\n  if (chr === \"+\") {\n    return 62;\n  }\n  if (chr === \"/\") {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n  return undefined;\n}\n\nmodule.exports = atob;\n"},"lineCount":108}},"error":null,"hash":"565e1672b674a450e8df9d7ca297bab5","cacheData":{"env":{}}}