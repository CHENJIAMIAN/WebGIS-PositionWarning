{"id":"node_modules/turf-kinks/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-kinks\\package.json","includedInParent":true,"mtime":1557726826215},{"name":"turf-helpers","loc":{"line":34,"column":20},"parent":"C:\\桌面\\new-project\\node_modules\\turf-kinks\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"}],"generated":{"js":"/**\n * Takes a {@link Polygon|polygon} and returns {@link Point|points} at all self-intersections.\n *\n * @name kinks\n * @param {Feature<Polygon>|Polygon} polygon input polygon\n * @returns {FeatureCollection<Point>} self-intersections\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-12.034835, 8.901183],\n *       [-12.060413, 8.899826],\n *       [-12.03638, 8.873199],\n *       [-12.059383, 8.871418],\n *       [-12.034835, 8.901183]\n *     ]]\n *   }\n * };\n *\n * var kinks = turf.kinks(poly);\n *\n * var resultFeatures = kinks.intersections.features.concat(poly);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nvar point = require('turf-helpers').point;\n\nmodule.exports = function (polyIn) {\n    var poly;\n    var results = {\n        type: 'FeatureCollection',\n        features: []\n    };\n    if (polyIn.type === 'Feature') {\n        poly = polyIn.geometry;\n    } else {\n        poly = polyIn;\n    }\n    poly.coordinates.forEach(function (ring1) {\n        poly.coordinates.forEach(function (ring2) {\n            for (var i = 0; i < ring1.length - 1; i++) {\n                for (var k = 0; k < ring2.length - 1; k++) {\n                    // don't check adjacent sides of a given ring, since of course they intersect in a vertex.\n                    if (ring1 === ring2 && (Math.abs(i - k) === 1 || Math.abs(i - k) === ring1.length - 2)) {\n                        continue;\n                    }\n\n                    var intersection = lineIntersects(ring1[i][0], ring1[i][1], ring1[i + 1][0], ring1[i + 1][1],\n                        ring2[k][0], ring2[k][1], ring2[k + 1][0], ring2[k + 1][1]);\n                    if (intersection) {\n                        results.features.push(point([intersection[0], intersection[1]]));\n                    }\n                }\n            }\n        });\n    });\n    return results;\n};\n\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n    var denominator, a, b, numerator1, numerator2,\n        result = {\n            x: null,\n            y: null,\n            onLine1: false,\n            onLine2: false\n        };\n    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n    if (denominator === 0) {\n        if (result.x !== null && result.y !== null) {\n            return result;\n        } else {\n            return false;\n        }\n    }\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n\n    // if we cast these lines infinitely in both directions, they intersect here:\n    result.x = line1StartX + (a * (line1EndX - line1StartX));\n    result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n    // if line1 is a segment and line2 is infinite, they intersect if:\n    if (a >= 0 && a <= 1) {\n        result.onLine1 = true;\n    }\n    // if line2 is a segment and line1 is infinite, they intersect if:\n    if (b >= 0 && b <= 1) {\n        result.onLine2 = true;\n    }\n    // if line1 and line2 are segments, they intersect if both of the above are true\n    if (result.onLine1 && result.onLine2) {\n        return [result.x, result.y];\n    } else {\n        return false;\n    }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-kinks/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turf-kinks/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/turf-kinks/index.js":"/**\n * Takes a {@link Polygon|polygon} and returns {@link Point|points} at all self-intersections.\n *\n * @name kinks\n * @param {Feature<Polygon>|Polygon} polygon input polygon\n * @returns {FeatureCollection<Point>} self-intersections\n * @example\n * var poly = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Polygon\",\n *     \"coordinates\": [[\n *       [-12.034835, 8.901183],\n *       [-12.060413, 8.899826],\n *       [-12.03638, 8.873199],\n *       [-12.059383, 8.871418],\n *       [-12.034835, 8.901183]\n *     ]]\n *   }\n * };\n *\n * var kinks = turf.kinks(poly);\n *\n * var resultFeatures = kinks.intersections.features.concat(poly);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\n\nvar point = require('turf-helpers').point;\n\nmodule.exports = function (polyIn) {\n    var poly;\n    var results = {\n        type: 'FeatureCollection',\n        features: []\n    };\n    if (polyIn.type === 'Feature') {\n        poly = polyIn.geometry;\n    } else {\n        poly = polyIn;\n    }\n    poly.coordinates.forEach(function (ring1) {\n        poly.coordinates.forEach(function (ring2) {\n            for (var i = 0; i < ring1.length - 1; i++) {\n                for (var k = 0; k < ring2.length - 1; k++) {\n                    // don't check adjacent sides of a given ring, since of course they intersect in a vertex.\n                    if (ring1 === ring2 && (Math.abs(i - k) === 1 || Math.abs(i - k) === ring1.length - 2)) {\n                        continue;\n                    }\n\n                    var intersection = lineIntersects(ring1[i][0], ring1[i][1], ring1[i + 1][0], ring1[i + 1][1],\n                        ring2[k][0], ring2[k][1], ring2[k + 1][0], ring2[k + 1][1]);\n                    if (intersection) {\n                        results.features.push(point([intersection[0], intersection[1]]));\n                    }\n                }\n            }\n        });\n    });\n    return results;\n};\n\n\n// modified from http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\nfunction lineIntersects(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\n    // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\n    var denominator, a, b, numerator1, numerator2,\n        result = {\n            x: null,\n            y: null,\n            onLine1: false,\n            onLine2: false\n        };\n    denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\n    if (denominator === 0) {\n        if (result.x !== null && result.y !== null) {\n            return result;\n        } else {\n            return false;\n        }\n    }\n    a = line1StartY - line2StartY;\n    b = line1StartX - line2StartX;\n    numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\n    numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\n    a = numerator1 / denominator;\n    b = numerator2 / denominator;\n\n    // if we cast these lines infinitely in both directions, they intersect here:\n    result.x = line1StartX + (a * (line1EndX - line1StartX));\n    result.y = line1StartY + (a * (line1EndY - line1StartY));\n\n    // if line1 is a segment and line2 is infinite, they intersect if:\n    if (a >= 0 && a <= 1) {\n        result.onLine1 = true;\n    }\n    // if line2 is a segment and line1 is infinite, they intersect if:\n    if (b >= 0 && b <= 1) {\n        result.onLine2 = true;\n    }\n    // if line1 and line2 are segments, they intersect if both of the above are true\n    if (result.onLine1 && result.onLine2) {\n        return [result.x, result.y];\n    } else {\n        return false;\n    }\n}\n"},"lineCount":113}},"error":null,"hash":"055e0aed7fb4c9bea3ce92730d0c2e68","cacheData":{"env":{}}}