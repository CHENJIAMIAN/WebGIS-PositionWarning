{"id":"node_modules/turf-concave/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-concave\\package.json","includedInParent":true,"mtime":1557726825793},{"name":"turf-tin","loc":{"line":6,"column":18},"parent":"C:\\桌面\\new-project\\node_modules\\turf-concave\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-tin\\index.js"},{"name":"turf-union","loc":{"line":7,"column":20},"parent":"C:\\桌面\\new-project\\node_modules\\turf-concave\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-union\\index.js"},{"name":"turf-distance","loc":{"line":8,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-concave\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"}],"generated":{"js":"// 1. run tin on points\n// 2. calculate lenth of all edges and area of all triangles\n// 3. remove triangles that fail the max length test\n// 4. buffer the results slightly\n// 5. merge the results\nvar tin = require('turf-tin');\nvar union = require('turf-union');\nvar distance = require('turf-distance');\n\n/**\n * Takes a set of {@link Point|points} and returns a concave hull polygon.\n *\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\n *\n * @param {FeatureCollection<Point>} points input points\n * @param {number} maxEdge the size of an edge necessary for part of the\n * hull to become concave (in miles)\n * @param {string} units used for maxEdge distance (miles or kilometers)\n * @returns {Feature<Polygon>} a concave hull\n * @throws {Error} if maxEdge parameter is missing\n * @throws {Error} if units parameter is missing\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.601226, 44.642643]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.591442, 44.651436]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.580799, 44.648749]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.573589, 44.641788]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.587665, 44.64533]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.595218, 44.64765]\n *       }\n *     }\n *   ]\n * };\n *\n * var hull = turf.concave(points, 1, 'miles');\n *\n * var resultFeatures = points.features.concat(hull);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nfunction concave(points, maxEdge, units) {\n    if (typeof maxEdge !== 'number') throw new Error('maxEdge parameter is required');\n    if (typeof units !== 'string') throw new Error('units parameter is required');\n\n    var tinPolys = tin(points);\n    var filteredPolys = tinPolys.features.filter(filterTriangles);\n    tinPolys.features = filteredPolys;\n\n    function filterTriangles(triangle) {\n        var pt1 = triangle.geometry.coordinates[0][0];\n        var pt2 = triangle.geometry.coordinates[0][1];\n        var pt3 = triangle.geometry.coordinates[0][2];\n        var dist1 = distance(pt1, pt2, units);\n        var dist2 = distance(pt2, pt3, units);\n        var dist3 = distance(pt1, pt3, units);\n        return (dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge);\n    }\n\n    return merge(tinPolys);\n}\n\nfunction merge(polygons) {\n    var merged = JSON.parse(JSON.stringify(polygons.features[0])),\n        features = polygons.features;\n\n    for (var i = 0, len = features.length; i < len; i++) {\n        var poly = features[i];\n        if (poly.geometry) {\n            merged = union(merged, poly);\n        }\n    }\n    return merged;\n}\n\nmodule.exports = concave;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-concave/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turf-concave/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}}],"sources":{"node_modules/turf-concave/index.js":"// 1. run tin on points\n// 2. calculate lenth of all edges and area of all triangles\n// 3. remove triangles that fail the max length test\n// 4. buffer the results slightly\n// 5. merge the results\nvar tin = require('turf-tin');\nvar union = require('turf-union');\nvar distance = require('turf-distance');\n\n/**\n * Takes a set of {@link Point|points} and returns a concave hull polygon.\n *\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\n *\n * @param {FeatureCollection<Point>} points input points\n * @param {number} maxEdge the size of an edge necessary for part of the\n * hull to become concave (in miles)\n * @param {string} units used for maxEdge distance (miles or kilometers)\n * @returns {Feature<Polygon>} a concave hull\n * @throws {Error} if maxEdge parameter is missing\n * @throws {Error} if units parameter is missing\n * @example\n * var points = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.601226, 44.642643]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.591442, 44.651436]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.580799, 44.648749]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.573589, 44.641788]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.587665, 44.64533]\n *       }\n *     }, {\n *       \"type\": \"Feature\",\n *       \"properties\": {},\n *       \"geometry\": {\n *         \"type\": \"Point\",\n *         \"coordinates\": [-63.595218, 44.64765]\n *       }\n *     }\n *   ]\n * };\n *\n * var hull = turf.concave(points, 1, 'miles');\n *\n * var resultFeatures = points.features.concat(hull);\n * var result = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": resultFeatures\n * };\n *\n * //=result\n */\nfunction concave(points, maxEdge, units) {\n    if (typeof maxEdge !== 'number') throw new Error('maxEdge parameter is required');\n    if (typeof units !== 'string') throw new Error('units parameter is required');\n\n    var tinPolys = tin(points);\n    var filteredPolys = tinPolys.features.filter(filterTriangles);\n    tinPolys.features = filteredPolys;\n\n    function filterTriangles(triangle) {\n        var pt1 = triangle.geometry.coordinates[0][0];\n        var pt2 = triangle.geometry.coordinates[0][1];\n        var pt3 = triangle.geometry.coordinates[0][2];\n        var dist1 = distance(pt1, pt2, units);\n        var dist2 = distance(pt2, pt3, units);\n        var dist3 = distance(pt1, pt3, units);\n        return (dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge);\n    }\n\n    return merge(tinPolys);\n}\n\nfunction merge(polygons) {\n    var merged = JSON.parse(JSON.stringify(polygons.features[0])),\n        features = polygons.features;\n\n    for (var i = 0, len = features.length; i < len; i++) {\n        var poly = features[i];\n        if (poly.geometry) {\n            merged = union(merged, poly);\n        }\n    }\n    return merged;\n}\n\nmodule.exports = concave;\n"},"lineCount":117}},"error":null,"hash":"e61001da262d247dea5af393658c0c28","cacheData":{"env":{}}}