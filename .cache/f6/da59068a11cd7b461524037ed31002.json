{"id":"node_modules/turf-hex-grid/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-hex-grid\\package.json","includedInParent":true,"mtime":1557726826220},{"name":"turf-helpers","loc":{"line":4,"column":32},"parent":"C:\\桌面\\new-project\\node_modules\\turf-hex-grid\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"},{"name":"turf-distance","loc":{"line":3,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-hex-grid\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"}],"generated":{"js":"var point = require('turf-helpers').point;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\nvar featurecollection = require('turf-helpers').featureCollection;\n\n//Precompute cosines and sines of angles used in hexagon creation\n// for performance gain\nvar cosines = [];\nvar sines = [];\nfor (var i = 0; i < 6; i++) {\n    var angle = 2 * Math.PI / 6 * i;\n    cosines.push(Math.cos(angle));\n    sines.push(Math.sin(angle));\n}\n\n/**\n * Takes a bounding box and a cell size in degrees and returns a {@link FeatureCollection} of flat-topped\n * hexagons ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {Array<number>} bbox bounding box in [minX, minY, maxX, maxY] order\n * @param {number} cellSize dimension of cell in specified units\n * @param {string} units used in calculating cellWidth ('miles' or 'kilometers')\n * @param {boolean} triangles whether to return as triangles instead of hexagons\n * @return {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellWidth = 50;\n * var units = 'miles';\n *\n * var hexgrid = turf.hexGrid(bbox, cellWidth, units);\n *\n * //=hexgrid\n */\nmodule.exports = function hexGrid(bbox, cellSize, units, triangles) {\n    var xFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n    var radius = cellWidth / 2;\n\n    var hex_width = radius * 2;\n    var hex_height = Math.sqrt(3) / 2 * cellHeight;\n\n    var box_width = bbox[2] - bbox[0];\n    var box_height = bbox[3] - bbox[1];\n\n    var x_interval = 3 / 4 * hex_width;\n    var y_interval = hex_height;\n\n    var x_span = box_width / (hex_width - radius / 2);\n    var x_count = Math.ceil(x_span);\n    if (Math.round(x_span) === x_count) {\n        x_count++;\n    }\n\n    var x_adjust = ((x_count * x_interval - radius / 2) - box_width) / 2 - radius / 2;\n\n    var y_count = Math.ceil(box_height / hex_height);\n\n    var y_adjust = (box_height - y_count * hex_height) / 2;\n\n    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n    if (hasOffsetY) {\n        y_adjust -= hex_height / 4;\n    }\n\n    var fc = featurecollection([]);\n    for (var x = 0; x < x_count; x++) {\n        for (var y = 0; y <= y_count; y++) {\n\n            var isOdd = x % 2 === 1;\n            if (y === 0 && isOdd) {\n                continue;\n            }\n\n            if (y === 0 && hasOffsetY) {\n                continue;\n            }\n\n            var center_x = x * x_interval + bbox[0] - x_adjust;\n            var center_y = y * y_interval + bbox[1] + y_adjust;\n\n            if (isOdd) {\n                center_y -= hex_height / 2;\n            }\n            if (triangles) {\n                fc.features.push.apply(fc.features, hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2));\n            } else {\n                fc.features.push(hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2));\n            }\n        }\n    }\n\n    return fc;\n};\n\n//Center should be [x, y]\nfunction hexagon(center, rx, ry) {\n    var vertices = [];\n    for (var i = 0; i < 6; i++) {\n        var x = center[0] + rx * cosines[i];\n        var y = center[1] + ry * sines[i];\n        vertices.push([x, y]);\n    }\n    //first and last vertex must be the same\n    vertices.push(vertices[0]);\n    return polygon([vertices]);\n}\n\n//Center should be [x, y]\nfunction hexTriangles(center, rx, ry) {\n    var triangles = [];\n    for (var i = 0; i < 6; i++) {\n        var vertices = [];\n        vertices.push(center);\n        vertices.push([\n            center[0] + rx * cosines[i],\n            center[1] + ry * sines[i]\n        ]);\n        vertices.push([\n            center[0] + rx * cosines[(i + 1) % 6],\n            center[1] + ry * sines[(i + 1) % 6]\n        ]);\n        vertices.push(center);\n        triangles.push(polygon([vertices]));\n    }\n    return triangles;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-hex-grid/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/turf-hex-grid/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}}],"sources":{"node_modules/turf-hex-grid/index.js":"var point = require('turf-helpers').point;\nvar polygon = require('turf-helpers').polygon;\nvar distance = require('turf-distance');\nvar featurecollection = require('turf-helpers').featureCollection;\n\n//Precompute cosines and sines of angles used in hexagon creation\n// for performance gain\nvar cosines = [];\nvar sines = [];\nfor (var i = 0; i < 6; i++) {\n    var angle = 2 * Math.PI / 6 * i;\n    cosines.push(Math.cos(angle));\n    sines.push(Math.sin(angle));\n}\n\n/**\n * Takes a bounding box and a cell size in degrees and returns a {@link FeatureCollection} of flat-topped\n * hexagons ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\n *\n * @name hexGrid\n * @param {Array<number>} bbox bounding box in [minX, minY, maxX, maxY] order\n * @param {number} cellSize dimension of cell in specified units\n * @param {string} units used in calculating cellWidth ('miles' or 'kilometers')\n * @param {boolean} triangles whether to return as triangles instead of hexagons\n * @return {FeatureCollection<Polygon>} a hexagonal grid\n * @example\n * var bbox = [-96,31,-84,40];\n * var cellWidth = 50;\n * var units = 'miles';\n *\n * var hexgrid = turf.hexGrid(bbox, cellWidth, units);\n *\n * //=hexgrid\n */\nmodule.exports = function hexGrid(bbox, cellSize, units, triangles) {\n    var xFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[2], bbox[1]]), units));\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSize / (distance(point([bbox[0], bbox[1]]), point([bbox[0], bbox[3]]), units));\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n    var radius = cellWidth / 2;\n\n    var hex_width = radius * 2;\n    var hex_height = Math.sqrt(3) / 2 * cellHeight;\n\n    var box_width = bbox[2] - bbox[0];\n    var box_height = bbox[3] - bbox[1];\n\n    var x_interval = 3 / 4 * hex_width;\n    var y_interval = hex_height;\n\n    var x_span = box_width / (hex_width - radius / 2);\n    var x_count = Math.ceil(x_span);\n    if (Math.round(x_span) === x_count) {\n        x_count++;\n    }\n\n    var x_adjust = ((x_count * x_interval - radius / 2) - box_width) / 2 - radius / 2;\n\n    var y_count = Math.ceil(box_height / hex_height);\n\n    var y_adjust = (box_height - y_count * hex_height) / 2;\n\n    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n    if (hasOffsetY) {\n        y_adjust -= hex_height / 4;\n    }\n\n    var fc = featurecollection([]);\n    for (var x = 0; x < x_count; x++) {\n        for (var y = 0; y <= y_count; y++) {\n\n            var isOdd = x % 2 === 1;\n            if (y === 0 && isOdd) {\n                continue;\n            }\n\n            if (y === 0 && hasOffsetY) {\n                continue;\n            }\n\n            var center_x = x * x_interval + bbox[0] - x_adjust;\n            var center_y = y * y_interval + bbox[1] + y_adjust;\n\n            if (isOdd) {\n                center_y -= hex_height / 2;\n            }\n            if (triangles) {\n                fc.features.push.apply(fc.features, hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2));\n            } else {\n                fc.features.push(hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2));\n            }\n        }\n    }\n\n    return fc;\n};\n\n//Center should be [x, y]\nfunction hexagon(center, rx, ry) {\n    var vertices = [];\n    for (var i = 0; i < 6; i++) {\n        var x = center[0] + rx * cosines[i];\n        var y = center[1] + ry * sines[i];\n        vertices.push([x, y]);\n    }\n    //first and last vertex must be the same\n    vertices.push(vertices[0]);\n    return polygon([vertices]);\n}\n\n//Center should be [x, y]\nfunction hexTriangles(center, rx, ry) {\n    var triangles = [];\n    for (var i = 0; i < 6; i++) {\n        var vertices = [];\n        vertices.push(center);\n        vertices.push([\n            center[0] + rx * cosines[i],\n            center[1] + ry * sines[i]\n        ]);\n        vertices.push([\n            center[0] + rx * cosines[(i + 1) % 6],\n            center[1] + ry * sines[(i + 1) % 6]\n        ]);\n        vertices.push(center);\n        triangles.push(polygon([vertices]));\n    }\n    return triangles;\n}\n"},"lineCount":131}},"error":null,"hash":"1c4a13c175a723aa4adb0a60563e0181","cacheData":{"env":{}}}