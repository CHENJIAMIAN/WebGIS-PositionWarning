{"id":"node_modules/turf-square/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-square\\package.json","includedInParent":true,"mtime":1557726825584},{"name":"turf-distance","loc":{"line":1,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-square\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"}],"generated":{"js":"var distance = require('turf-distance');\n\n/**\n * Takes a bounding box and calculates the minimum square bounding box that\n * would contain the input.\n *\n * @name square\n * @param {Array<number>} bbox a bounding box\n * @return {Array<number>} a square surrounding `bbox`\n * @example\n * var bbox = [-20,-20,-15,0];\n *\n * var squared = turf.square(bbox);\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     turf.bboxPolygon(bbox),\n *     turf.bboxPolygon(squared)\n *   ]\n * };\n *\n * //=features\n */\nmodule.exports = function (bbox) {\n    var horizontalDistance = distance(bbox.slice(0, 2), [bbox[2], bbox[1]], 'miles');\n    var verticalDistance = distance(bbox.slice(0, 2), [bbox[0], bbox[3]], 'miles');\n    if (horizontalDistance >= verticalDistance) {\n        var verticalMidpoint = (bbox[1] + bbox[3]) / 2;\n        return [\n            bbox[0],\n            verticalMidpoint - ((bbox[2] - bbox[0]) / 2),\n            bbox[2],\n            verticalMidpoint + ((bbox[2] - bbox[0]) / 2)\n        ];\n    } else {\n        var horizontalMidpoint = (bbox[0] + bbox[2]) / 2;\n        return [\n            horizontalMidpoint - ((bbox[3] - bbox[1]) / 2),\n            bbox[1],\n            horizontalMidpoint + ((bbox[3] - bbox[1]) / 2),\n            bbox[3]\n        ];\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-square/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-square/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/turf-square/index.js":"var distance = require('turf-distance');\n\n/**\n * Takes a bounding box and calculates the minimum square bounding box that\n * would contain the input.\n *\n * @name square\n * @param {Array<number>} bbox a bounding box\n * @return {Array<number>} a square surrounding `bbox`\n * @example\n * var bbox = [-20,-20,-15,0];\n *\n * var squared = turf.square(bbox);\n *\n * var features = {\n *   \"type\": \"FeatureCollection\",\n *   \"features\": [\n *     turf.bboxPolygon(bbox),\n *     turf.bboxPolygon(squared)\n *   ]\n * };\n *\n * //=features\n */\nmodule.exports = function (bbox) {\n    var horizontalDistance = distance(bbox.slice(0, 2), [bbox[2], bbox[1]], 'miles');\n    var verticalDistance = distance(bbox.slice(0, 2), [bbox[0], bbox[3]], 'miles');\n    if (horizontalDistance >= verticalDistance) {\n        var verticalMidpoint = (bbox[1] + bbox[3]) / 2;\n        return [\n            bbox[0],\n            verticalMidpoint - ((bbox[2] - bbox[0]) / 2),\n            bbox[2],\n            verticalMidpoint + ((bbox[2] - bbox[0]) / 2)\n        ];\n    } else {\n        var horizontalMidpoint = (bbox[0] + bbox[2]) / 2;\n        return [\n            horizontalMidpoint - ((bbox[3] - bbox[1]) / 2),\n            bbox[1],\n            horizontalMidpoint + ((bbox[3] - bbox[1]) / 2),\n            bbox[3]\n        ];\n    }\n};\n"},"lineCount":46}},"error":null,"hash":"bc127834cc1e1bafff2ac25336e52255","cacheData":{"env":{}}}