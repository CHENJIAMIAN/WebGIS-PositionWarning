{"id":"node_modules/turf-isolines/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\package.json","includedInParent":true,"mtime":1557726826216},{"name":"turf-tin","loc":{"line":3,"column":18},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-tin\\index.js"},{"name":"turf-inside","loc":{"line":4,"column":21},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-inside\\index.js"},{"name":"turf-grid","loc":{"line":5,"column":19},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-grid\\index.js"},{"name":"turf-bbox","loc":{"line":6,"column":19},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-bbox\\index.js"},{"name":"turf-planepoint","loc":{"line":7,"column":25},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-planepoint\\index.js"},{"name":"turf-helpers","loc":{"line":9,"column":25},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"},{"name":"turf-square","loc":{"line":10,"column":21},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-square\\index.js"},{"name":"./conrec","loc":{"line":11,"column":21},"parent":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-isolines\\conrec.js"}],"generated":{"js":"//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\nvar inside = require('turf-inside');\nvar grid = require('turf-grid');\nvar bbox = require('turf-bbox');\nvar planepoint = require('turf-planepoint');\nvar featurecollection = require('turf-helpers').featureCollection;\nvar linestring = require('turf-helpers').lineString;\nvar square = require('turf-square');\nvar Conrec = require('./conrec');\n\n/**\n * Takes {@link Point|points} with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} points input points\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {Array<number>} breaks where to draw contours\n * @returns {FeatureCollection<LineString>} isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\nmodule.exports = function (points, z, resolution, breaks) {\n    var tinResult = tin(points, z);\n    var bboxBBox = bbox(points);\n    var squareBBox = square(bboxBBox);\n    var gridResult = grid(squareBBox, resolution);\n    var data = [];\n\n    for (var i = 0; i < gridResult.features.length; i++) {\n        var pt = gridResult.features[i];\n        for (var j = 0; j < tinResult.features.length; j++) {\n            var triangle = tinResult.features[j];\n            if (inside(pt, triangle)) {\n                pt.properties = {};\n                pt.properties[z] = planepoint(pt, triangle);\n            }\n        }\n    }\n\n    var depth = Math.sqrt(gridResult.features.length);\n    for (var x = 0; x < depth; x++) {\n        var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n        var xFlat = [];\n\n        for (var g = 0; g < xGroup.length; g++) {\n            if (xGroup[g].properties) {\n                xFlat.push(xGroup[g].properties[z]);\n            } else {\n                xFlat.push(0);\n            }\n        }\n        data.push(xFlat);\n    }\n    var interval = (squareBBox[2] - squareBBox[0]) / depth;\n    var xCoordinates = [];\n    var yCoordinates = [];\n    for (var d = 0; d < depth; d++) {\n        xCoordinates.push(d * interval + squareBBox[0]);\n        yCoordinates.push(d * interval + squareBBox[1]);\n    }\n\n    var c = new Conrec();\n    c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n    var contourList = c.contourList();\n\n    var fc = featurecollection([]);\n    contourList.forEach(function (c) {\n        if (c.length > 2) {\n            var polyCoordinates = [];\n            c.forEach(function (coord) {\n                polyCoordinates.push([coord.x, coord.y]);\n            });\n            var poly = linestring(polyCoordinates);\n            poly.properties = {};\n            poly.properties[z] = c.level;\n\n            fc.features.push(poly);\n        }\n    });\n\n    return fc;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-isolines/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turf-isolines/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}}],"sources":{"node_modules/turf-isolines/index.js":"//https://github.com/jasondavies/conrec.js\n//http://stackoverflow.com/questions/263305/drawing-a-topographical-map\nvar tin = require('turf-tin');\nvar inside = require('turf-inside');\nvar grid = require('turf-grid');\nvar bbox = require('turf-bbox');\nvar planepoint = require('turf-planepoint');\nvar featurecollection = require('turf-helpers').featureCollection;\nvar linestring = require('turf-helpers').lineString;\nvar square = require('turf-square');\nvar Conrec = require('./conrec');\n\n/**\n * Takes {@link Point|points} with z-values and an array of\n * value breaks and generates [isolines](http://en.wikipedia.org/wiki/Isoline).\n *\n * @name isolines\n * @param {FeatureCollection<Point>} points input points\n * @param {string} z the property name in `points` from which z-values will be pulled\n * @param {number} resolution resolution of the underlying grid\n * @param {Array<number>} breaks where to draw contours\n * @returns {FeatureCollection<LineString>} isolines\n * @example\n * // create random points with random\n * // z-values in their properties\n * var points = turf.random('point', 100, {\n *   bbox: [0, 30, 20, 50]\n * });\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = Math.random() * 10;\n * }\n * var breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n * var isolined = turf.isolines(points, 'z', 15, breaks);\n * //=isolined\n */\nmodule.exports = function (points, z, resolution, breaks) {\n    var tinResult = tin(points, z);\n    var bboxBBox = bbox(points);\n    var squareBBox = square(bboxBBox);\n    var gridResult = grid(squareBBox, resolution);\n    var data = [];\n\n    for (var i = 0; i < gridResult.features.length; i++) {\n        var pt = gridResult.features[i];\n        for (var j = 0; j < tinResult.features.length; j++) {\n            var triangle = tinResult.features[j];\n            if (inside(pt, triangle)) {\n                pt.properties = {};\n                pt.properties[z] = planepoint(pt, triangle);\n            }\n        }\n    }\n\n    var depth = Math.sqrt(gridResult.features.length);\n    for (var x = 0; x < depth; x++) {\n        var xGroup = gridResult.features.slice(x * depth, (x + 1) * depth);\n        var xFlat = [];\n\n        for (var g = 0; g < xGroup.length; g++) {\n            if (xGroup[g].properties) {\n                xFlat.push(xGroup[g].properties[z]);\n            } else {\n                xFlat.push(0);\n            }\n        }\n        data.push(xFlat);\n    }\n    var interval = (squareBBox[2] - squareBBox[0]) / depth;\n    var xCoordinates = [];\n    var yCoordinates = [];\n    for (var d = 0; d < depth; d++) {\n        xCoordinates.push(d * interval + squareBBox[0]);\n        yCoordinates.push(d * interval + squareBBox[1]);\n    }\n\n    var c = new Conrec();\n    c.contour(data, 0, resolution, 0, resolution, xCoordinates, yCoordinates, breaks.length, breaks);\n    var contourList = c.contourList();\n\n    var fc = featurecollection([]);\n    contourList.forEach(function (c) {\n        if (c.length > 2) {\n            var polyCoordinates = [];\n            c.forEach(function (coord) {\n                polyCoordinates.push([coord.x, coord.y]);\n            });\n            var poly = linestring(polyCoordinates);\n            poly.properties = {};\n            poly.properties[z] = c.level;\n\n            fc.features.push(poly);\n        }\n    });\n\n    return fc;\n};\n"},"lineCount":97}},"error":null,"hash":"a51c5ee3bd0d5459e4e39a0d68731570","cacheData":{"env":{}}}