{"id":"node_modules/turf-line-distance/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557726847338},{"name":"C:\\桌面\\new-project\\node_modules\\turf-line-distance\\package.json","includedInParent":true,"mtime":1557726826217},{"name":"turf-distance","loc":{"line":1,"column":23},"parent":"C:\\桌面\\new-project\\node_modules\\turf-line-distance\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-distance\\index.js"},{"name":"turf-helpers","loc":{"line":2,"column":20},"parent":"C:\\桌面\\new-project\\node_modules\\turf-line-distance\\index.js","resolved":"C:\\桌面\\new-project\\node_modules\\turf-helpers\\index.js"}],"generated":{"js":"var distance = require('turf-distance');\nvar point = require('turf-helpers').point;\n\n/**\n * Takes a {@link LineString|line} and measures its length in the specified units.\n *\n * @name lineDistance\n * @param {Feature<LineString>} line line to measure\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the input line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\nmodule.exports = function lineDistance(line, units) {\n    if (line.type === 'FeatureCollection') {\n        return line.features.reduce(function (memo, feature) {\n            return memo + lineDistance(feature, units);\n        }, 0);\n    }\n\n    var geometry = line.type === 'Feature' ? line.geometry : line;\n    var d, i;\n\n    if (geometry.type === 'LineString') {\n        return length(geometry.coordinates, units);\n    } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            d += length(geometry.coordinates[i], units);\n        }\n        return d;\n    } else if (line.type === 'MultiPolygon') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            for (var j = 0; j < geometry.coordinates[i].length; j++) {\n                d += length(geometry.coordinates[i][j], units);\n            }\n        }\n        return d;\n    } else {\n        throw new Error('input must be a LineString, MultiLineString, ' +\n            'Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection ' +\n            'containing only those types)');\n    }\n\n};\n\nfunction length(coords, units) {\n    var travelled = 0;\n    var prevCoords = point(coords[0]);\n    var curCoords = point(coords[0]);\n    var temp;\n    for (var i = 1; i < coords.length; i++) {\n        curCoords.geometry.coordinates = coords[i];\n        travelled += distance(prevCoords, curCoords, units);\n        temp = prevCoords;\n        prevCoords = curCoords;\n        curCoords = temp;\n    }\n    return travelled;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turf-line-distance/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turf-line-distance/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}}],"sources":{"node_modules/turf-line-distance/index.js":"var distance = require('turf-distance');\nvar point = require('turf-helpers').point;\n\n/**\n * Takes a {@link LineString|line} and measures its length in the specified units.\n *\n * @name lineDistance\n * @param {Feature<LineString>} line line to measure\n * @param {String} [units=kilometers] can be degrees, radians, miles, or kilometers\n * @return {Number} length of the input line\n * @example\n * var line = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"LineString\",\n *     \"coordinates\": [\n *       [-77.031669, 38.878605],\n *       [-77.029609, 38.881946],\n *       [-77.020339, 38.884084],\n *       [-77.025661, 38.885821],\n *       [-77.021884, 38.889563],\n *       [-77.019824, 38.892368]\n *     ]\n *   }\n * };\n *\n * var length = turf.lineDistance(line, 'miles');\n *\n * //=line\n *\n * //=length\n */\nmodule.exports = function lineDistance(line, units) {\n    if (line.type === 'FeatureCollection') {\n        return line.features.reduce(function (memo, feature) {\n            return memo + lineDistance(feature, units);\n        }, 0);\n    }\n\n    var geometry = line.type === 'Feature' ? line.geometry : line;\n    var d, i;\n\n    if (geometry.type === 'LineString') {\n        return length(geometry.coordinates, units);\n    } else if (geometry.type === 'Polygon' || geometry.type === 'MultiLineString') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            d += length(geometry.coordinates[i], units);\n        }\n        return d;\n    } else if (line.type === 'MultiPolygon') {\n        d = 0;\n        for (i = 0; i < geometry.coordinates.length; i++) {\n            for (var j = 0; j < geometry.coordinates[i].length; j++) {\n                d += length(geometry.coordinates[i][j], units);\n            }\n        }\n        return d;\n    } else {\n        throw new Error('input must be a LineString, MultiLineString, ' +\n            'Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection ' +\n            'containing only those types)');\n    }\n\n};\n\nfunction length(coords, units) {\n    var travelled = 0;\n    var prevCoords = point(coords[0]);\n    var curCoords = point(coords[0]);\n    var temp;\n    for (var i = 1; i < coords.length; i++) {\n        curCoords.geometry.coordinates = coords[i];\n        travelled += distance(prevCoords, curCoords, units);\n        temp = prevCoords;\n        prevCoords = curCoords;\n        curCoords = temp;\n    }\n    return travelled;\n}\n"},"lineCount":82}},"error":null,"hash":"11437316c421e9fe7a4ae5a974549635","cacheData":{"env":{}}}