{"id":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","dependencies":[{"name":"C:\\桌面\\new-project\\package.json","includedInParent":true,"mtime":1557670107923},{"name":"C:\\桌面\\new-project\\node_modules\\_crypto-browserify@3.12.0@crypto-browserify\\node_modules\\public-encrypt\\node_modules\\parse-asn1\\node_modules\\asn1.js\\node_modules\\minimalistic-assert\\package.json","includedInParent":true,"mtime":1557646967551}],"generated":{"js":"module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}}],"sources":{"node_modules/_crypto-browserify@3.12.0@crypto-browserify/node_modules/public-encrypt/node_modules/parse-asn1/node_modules/asn1.js/node_modules/minimalistic-assert/index.js":"module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n"},"lineCount":12}},"error":null,"hash":"06ef7f44a31cbd94f74b7ff58c787e16","cacheData":{"env":{}}}